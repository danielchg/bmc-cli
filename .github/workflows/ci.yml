name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 'stable'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-stable-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-stable-
          ${{ runner.os }}-go-

    - name: Debug Go environment
      run: |
        go version
        go env GOPATH
        go env GOCACHE
        go env GOMODCACHE
        
    - name: Download and tidy dependencies
      run: |
        echo "Downloading dependencies..."
        go mod download -x
        echo "Tidying dependencies..."
        go mod tidy -v
        echo "Dependencies ready"
        
    - name: Verify dependencies
      run: |
        echo "Verifying dependencies..."
        go mod verify
        echo "Verification complete"

    - name: Clean coverage files (Windows)
      if: runner.os == 'Windows'
      run: if exist coverage.out del coverage.out

    - name: Clean coverage files (Unix)
      if: runner.os != 'Windows'
      run: rm -f coverage.out

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      run: go test -v -coverprofile=coverage.out

    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: go test -v -race -coverprofile=coverage.out

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 'stable'

    - name: Download and tidy dependencies
      run: |
        go mod download
        go mod tidy

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m --disable-all --enable=errcheck,gosimple,govet,ineffassign,staticcheck,typecheck,unused,gofmt,goimports,misspell

  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 'stable'

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted correctly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, format]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Windows on ARM64 is not commonly used
          - goos: windows
            goarch: arm64

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 'stable'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        if [ "$GOOS" = "windows" ]; then
          go build -o bmc-cli-${{ matrix.goos }}-${{ matrix.goarch }}.exe .
        else
          go build -o bmc-cli-${{ matrix.goos }}-${{ matrix.goarch }} .
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bmc-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        path: bmc-cli-*

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 'stable'

    - name: Download and tidy dependencies
      run: |
        go mod download
        go mod tidy

    - name: Install Gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: gosec -fmt sarif -out gosec.sarif ./...

    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif 